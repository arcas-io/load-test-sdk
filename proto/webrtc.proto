syntax = "proto3";
package webrtc;

import "google/protobuf/timestamp.proto";

service WebRtc {
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  rpc StartSession(StartSessionRequest) returns (Empty);
  rpc StopSession(StopSessionRequest) returns (Empty);
  rpc GetStats(GetStatsRequest) returns (GetStatsResponse);
  // rpc GetPeerConnectionStats(GetPeerConnectionStatsRequest) returns (GetPeerConnectionStatsResponse);
  rpc CreatePeerConnection(CreatePeerConnectionRequest)
      returns (Empty);
  rpc CreateOffer(CreateSDPRequest) returns (CreateSDPResponse);
  rpc CreateAnswer(CreateSDPRequest) returns (CreateSDPResponse);
  rpc SetLocalDescription(SetSDPRequest) returns (SetSDPResponse);
  rpc SetRemoteDescription(SetSDPRequest) returns (SetSDPResponse);
  rpc AddTrack(AddTrackRequest) returns (Empty);
  rpc AddTransceiver(AddTransceiverRequest) returns (Empty);
  rpc Observer(ObserverRequest) returns (stream PeerConnectionObserverMessage);
  rpc GetTransceivers(GetTransceiversRequest) returns (GetTransceiversResponse);
}

// Reusable empty message
message Empty {}

// Create Session
message CreateSessionRequest { string session_id = 1; string name = 2; }
message CreateSessionResponse { string session_id = 1; }

// Start Session
message StartSessionRequest { string session_id = 1; }

// Stop Session
message StopSessionRequest { string session_id = 1; }

// Get Stats
message GetStatsRequest { string session_id = 1; }
message PeerConnectionState {
  int32 num_sending = 1;
  int32 num_not_sending = 2;
  int32 num_receiving = 3;
  int32 num_not_receiving = 4;
}
message SessionStats {
  string id = 1;
  string name = 2;
  uint64 num_peer_connections = 3;
  string state = 4;
  PeerConnectionState peer_connection_state = 5;
  google.protobuf.Timestamp start_time = 6;
  google.protobuf.Timestamp stop_time = 7;
  uint64 elapsed_time = 8;
}
message GetStatsResponse {
  SessionStats session = 1;
}

// // Get Peer Connection Stats
// message GetPeerConnectionStatsRequest { string session_id = 1; string peer_connection_id = 2; }
// message PeerConnectionVideoSenderStats {
//   uint32 ssrc = 1;
//   uint32 packets_sent = 2;
//   uint64 bytes_sent = 3;
//   uint32 frames_encoded = 4;
//   uint32 key_frames_encoded = 5;
//   double total_encode_time = 6;
//   uint32 frame_width = 7;
//   uint32 frame_height = 8;
//   uint64 retransmitted_packets_sent = 9;
//   uint64 retransmitted_bytes_sent = 10;
//   double total_packet_send_delay = 11;
//   uint32 nack_count = 12;
//   uint32 fir_count = 13;
//   uint32 pli_count = 14;
//   uint32 quality_limitation_reason = 15;
//   uint32 quality_limitation_resolution_changes = 16;
//   int32 remote_packets_lost = 17;
//   double remote_jitter = 18;
//   double remote_round_trip_time = 19;
// }
// message GetPeerConnectionStatsResponse {
//   PeerConnectionVideoSenderStats video_sender = 1;
// }

// Get Tranceiver
message GetTransceiversRequest {
  string session_id = 1;
  string peer_connection_id = 2;
}
message GetTransceiversResponse {
  repeated Transceiver transceivers = 1;
}

// Create PeerConnection
message CreatePeerConnectionRequest {
  string session_id = 1;
  string peer_connection_id = 2;
  string name = 3;
}

enum SDPType {
  OFFER = 0;
  PRANSWER = 1;
  ANSWER = 2;
  ROLLBACK = 3;
}

message CreateSDPRequest { string session_id = 1; string peer_connection_id = 2; }
message CreateSDPResponse { string session_id = 1; string peer_connection_id = 2; string sdp = 3; SDPType sdp_type = 4; }
message SetSDPRequest { string session_id = 1; string peer_connection_id = 2; string sdp = 3; SDPType sdp_type = 4; }
message SetSDPResponse { string session_id = 1; string peer_connection_id = 2; bool success = 3; }

message AddTrackRequest {
  string session_id = 1;
  string peer_connection_id = 2;
  string track_id = 3;
  string track_label = 4;
}
// message AddTrackResponse []

message AddTransceiverRequest {
  string session_id = 1;
  string peer_connection_id = 2;
  string track_id = 3;
  string track_label = 4;
}

message ObserverRequest { string session_id = 1; string peer_connection_id = 2; }

message IceCandidate {
    string sdp = 1;
    string mid = 2;
    uint32 mline_index = 3;
}

message VideoTransceiver {
    string mid = 1;
    string direction = 2;
};

enum MediaType {
    AUDIO = 0;
    VIDEO = 1;
    DATA = 2;
    UNSUPPORTED = 3;
}

enum TransceiverDirection {
    SENDRECV = 0;
    SENDONLY = 1;
    RECVONLY = 2;
    INACTIVE = 3;
}

message Transceiver {
    string id = 1;
    string mid = 2;
    TransceiverDirection direction = 3;
    MediaType media_type = 4;
}

message PeerConnectionObserverMessage {
    oneof event {
        IceCandidate ice_candidate = 1;
        VideoTransceiver video_transceiver = 2;
    }
}
